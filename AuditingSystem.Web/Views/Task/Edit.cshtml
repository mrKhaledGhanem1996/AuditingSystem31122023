@model Tasks
@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/css/addeditstyle.css" rel="stylesheet" />
<div class="row">

    <div class="col-md-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Edit Task</h4>
                <form class="forms-sample" id="EditForm">
                    <div class="form-group">
                        <label>Objective</label>
                        @Html.DropDownList("ObjectiveId", ViewBag.ObjectiveId as SelectList, "-- Select One --", new { @class = "form-control", @id = "Objective", @name="ObjectiveId" })
                        <span asp-validation-for="ObjectiveId" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label for="Name">Name</label>
                        <input type="text" class="form-control" id="Name" placeholder="Task Name" asp-for="Name">
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label for="Description">Description</label>
                        <textarea asp-for="Description" type="text" class="form-control" id="Description" placeholder="Description"></textarea>
                        @* <div id="Description">@Html.Raw(Model.Description)</div> *@
                    </div>
                    <button id="saveButton" type="button" class="btn btn-primary me-2">Save Data</button>
                    <button id="btnCancel" class="btn btn-light">Cancel</button>
                </form>
            </div>
        </div>
    </div>


</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            $("#EditForm").validate({
                rules: {
                    ObjectiveId: {
                        required: true
                    },
                    Name: {
                        required: true
                    }
                },
                messages: {
                    ObjectiveId: {
                        required: "The Objective field is required"
                    },
                    Name: {
                        required: "The Name field is required"
                    }
                },
                errorPlacement: function (error, element) {
                    if (element.is("select")) {
                        error.insertAfter(element.siblings("span"));
                    } else if (element.is("textarea")) {
                        error.insertAfter(element);
                    } else {
                        error.insertAfter(element);
                    }
                }
            });

            $(document).on("click", "#btnCancel", function (e) {
                e.preventDefault();
                window.location.href = '/Task/Index';
            });

            $("#saveButton").click(function () {
                var editorDescription = CKEDITOR.instances['Description'];

                var htmlDescription = editorDescription.getData();
                if ($("#EditForm").valid()) {
                    var formData = {
                        Name: $("#Name").val(),
                        ObjectiveId: $("#Objective").val(),
                        Description: htmlDescription
                    };
                    $.ajax({
                        url: "/api/tasks/" + @Model.Id,
                        method: "PUT",
                        dataType: 'json',
                        contentType: "application/json",
                        data: JSON.stringify(formData),
                        success: function (response) {
                            alert("The Modified is Successfully");
                            window.location.href = '/Task/Index';
                        },
                        error: function (error) {
                            if (error.responseJSON && error.responseJSON.errors) {
                                $.each(error.responseJSON.errors, function (key, value) {
                                    $("#" + key).siblings(".text-danger").text(value);
                                });
                            }
                        }
                    });
                }
            });
        });
    </script>
}